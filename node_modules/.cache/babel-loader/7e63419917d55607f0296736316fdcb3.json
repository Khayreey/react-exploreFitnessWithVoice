{"ast":null,"code":"var _jsxFileName = \"H:\\\\React\\\\FREE-CODE-CAMP\\\\fitness\\\\src\\\\components\\\\MicrophoneSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport micro from '../assets/icons/m.png';\nimport animated from '../assets/icons/m.gif';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { exGetOptions, fetchData } from '../utils/fetchData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MicrophoneSearch = props => {\n  _s();\n\n  const [search, setSearch] = useState('');\n  useEffect(() => {\n    if (!search) {\n      return;\n    } else {}\n  }, []);\n\n  const searchHandler = async () => {\n    if (search) {}\n  };\n\n  const commands = [{\n    command: 'reset',\n    callback: () => resetTranscript()\n  } // {\n  //   command: 'shut up',\n  //   callback: () => setMessage('I wasn\\'t talking.')\n  // },\n  // {\n  //   command: 'Hello',\n  //   callback: () => setMessage('Hi there!')\n  // },\n  ];\n  const {\n    transcript,\n    interimTranscript,\n    finalTranscript,\n    resetTranscript,\n    listening\n  } = useSpeechRecognition({\n    commands\n  });\n  useEffect(() => {\n    if (finalTranscript !== '') {\n      console.log('Got final result:', finalTranscript);\n    }\n  }, [interimTranscript, finalTranscript]);\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null;\n  }\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    console.log('Your browser does not support speech recognition software! Try Chrome desktop, maybe?');\n  }\n\n  const listenContinuously = () => {\n    SpeechRecognition.startListening({\n      language: 'en-GB'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [listening ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: animated,\n      onClick: SpeechRecognition.stopListening,\n      className: \"microphone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n      src: micro,\n      onClick: listenContinuously,\n      className: \"microphone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MicrophoneSearch, \"VrfmD45elF546M0Y7hYhkE4SxQI=\", false, function () {\n  return [useSpeechRecognition];\n});\n\n_c = MicrophoneSearch;\nexport default MicrophoneSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"MicrophoneSearch\");","map":{"version":3,"names":["React","useEffect","useState","micro","animated","SpeechRecognition","useSpeechRecognition","exGetOptions","fetchData","MicrophoneSearch","props","search","setSearch","searchHandler","commands","command","callback","resetTranscript","transcript","interimTranscript","finalTranscript","listening","console","log","browserSupportsSpeechRecognition","listenContinuously","startListening","language","stopListening"],"sources":["H:/React/FREE-CODE-CAMP/fitness/src/components/MicrophoneSearch.js"],"sourcesContent":["import React , {useEffect , useState} from 'react'\r\nimport micro from '../assets/icons/m.png'\r\nimport animated from '../assets/icons/m.gif'\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport {exGetOptions,fetchData} from '../utils/fetchData'\r\nconst MicrophoneSearch = (props) => {\r\n\r\n  const [search , setSearch] = useState('')\r\n  useEffect(()=>{\r\n    if(!search)\r\n    {\r\n        return\r\n    }\r\n\r\n    else {\r\n\r\n    }\r\n  },[])\r\n    const searchHandler = async ()=> {\r\n        if(search)\r\n        {\r\n           \r\n        }\r\n        \r\n    }\r\n\r\n    const commands = [\r\n        {\r\n          command: 'reset',\r\n          callback: () => resetTranscript()\r\n        },\r\n        // {\r\n        //   command: 'shut up',\r\n        //   callback: () => setMessage('I wasn\\'t talking.')\r\n        // },\r\n        // {\r\n        //   command: 'Hello',\r\n        //   callback: () => setMessage('Hi there!')\r\n        // },\r\n      ]\r\n      const {\r\n        transcript,\r\n        interimTranscript,\r\n        finalTranscript,\r\n        resetTranscript,\r\n        listening,\r\n      } = useSpeechRecognition({ commands });\r\n     \r\n      useEffect(() => {\r\n        if (finalTranscript !== '') {\r\n          console.log('Got final result:', finalTranscript);\r\n        }\r\n      }, [interimTranscript, finalTranscript]);\r\n      if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return null;\r\n      }\r\n     \r\n      if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        console.log('Your browser does not support speech recognition software! Try Chrome desktop, maybe?');\r\n      }\r\n      const listenContinuously = () => {\r\n        SpeechRecognition.startListening({\r\n          language: 'en-GB',\r\n        });\r\n      };\r\n  return (\r\n    <>\r\n    {listening ? <img src={animated} onClick={SpeechRecognition.stopListening} className='microphone'/>\r\n    : <img src={micro} onClick={listenContinuously} className='microphone'/>\r\n  }\r\n  <p>{transcript}</p>\r\n  </>\r\n  )\r\n}\r\n\r\nexport default MicrophoneSearch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,QAA5B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,iBAAP,IAA4BC,oBAA5B,QAAwD,0BAAxD;AACA,SAAQC,YAAR,EAAqBC,SAArB,QAAqC,oBAArC;;;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;EAAA;;EAElC,MAAM,CAACC,MAAD,EAAUC,SAAV,IAAuBV,QAAQ,CAAC,EAAD,CAArC;EACAD,SAAS,CAAC,MAAI;IACZ,IAAG,CAACU,MAAJ,EACA;MACI;IACH,CAHD,MAKK,CAEJ;EACF,CATQ,EASP,EATO,CAAT;;EAUE,MAAME,aAAa,GAAG,YAAW;IAC7B,IAAGF,MAAH,EACA,CAEC;EAEJ,CAND;;EAQA,MAAMG,QAAQ,GAAG,CACb;IACEC,OAAO,EAAE,OADX;IAEEC,QAAQ,EAAE,MAAMC,eAAe;EAFjC,CADa,CAKb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAZa,CAAjB;EAcE,MAAM;IACJC,UADI;IAEJC,iBAFI;IAGJC,eAHI;IAIJH,eAJI;IAKJI;EALI,IAMFf,oBAAoB,CAAC;IAAEQ;EAAF,CAAD,CANxB;EAQAb,SAAS,CAAC,MAAM;IACd,IAAImB,eAAe,KAAK,EAAxB,EAA4B;MAC1BE,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCH,eAAjC;IACD;EACF,CAJQ,EAIN,CAACD,iBAAD,EAAoBC,eAApB,CAJM,CAAT;;EAKA,IAAI,CAACf,iBAAiB,CAACmB,gCAAlB,EAAL,EAA2D;IACzD,OAAO,IAAP;EACD;;EAED,IAAI,CAACnB,iBAAiB,CAACmB,gCAAlB,EAAL,EAA2D;IACzDF,OAAO,CAACC,GAAR,CAAY,uFAAZ;EACD;;EACD,MAAME,kBAAkB,GAAG,MAAM;IAC/BpB,iBAAiB,CAACqB,cAAlB,CAAiC;MAC/BC,QAAQ,EAAE;IADqB,CAAjC;EAGD,CAJD;;EAKJ,oBACE;IAAA,WACCN,SAAS,gBAAG;MAAK,GAAG,EAAEjB,QAAV;MAAoB,OAAO,EAAEC,iBAAiB,CAACuB,aAA/C;MAA8D,SAAS,EAAC;IAAxE;MAAA;MAAA;MAAA;IAAA,QAAH,gBACR;MAAK,GAAG,EAAEzB,KAAV;MAAiB,OAAO,EAAEsB,kBAA1B;MAA8C,SAAS,EAAC;IAAxD;MAAA;MAAA;MAAA;IAAA,QAFF,eAIF;MAAA,UAAIP;IAAJ;MAAA;MAAA;MAAA;IAAA,QAJE;EAAA,gBADF;AAQD,CApED;;GAAMT,gB;UAyCIH,oB;;;KAzCJG,gB;AAsEN,eAAeA,gBAAf"},"metadata":{},"sourceType":"module"}